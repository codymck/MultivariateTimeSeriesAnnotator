package edu.csusm.capstone.timeseriesannotator.View;

import edu.csusm.capstone.timeseriesannotator.Controller.HDF5Action;
import edu.csusm.capstone.timeseriesannotator.Model.HDFReader;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author josef
 */
public class HDFdataSelectMenu extends javax.swing.JDialog {

    boolean selected = false;
    String xPath;
    String yPath;
    HDFReader reader;
    char[] previousYKey;
    char[] previousXKey;
    List<String> values;
    List<List<String>> pathValues; //List 0: first set of data, List x: proceeding sets of data

    int counter;
    int pathValueIndex = 1;
    
    public static HDFdataSelectMenu HDF;

    /**
     * Creates new form HDFdataSelectMenu
     */
    public HDFdataSelectMenu(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.pathValues = new ArrayList<>();
        initComponents();
        setLocationRelativeTo(AppFrame.frame);
        yList.setVisible(false);
        //xList.setVisible(false);
        
        this.HDF = this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Xaxispath = new javax.swing.JTextField();
        Yaxispath = new javax.swing.JTextField();
        HDF5PathButton = new javax.swing.JButton();
        yList = new java.awt.List();
        xList = new java.awt.List();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("HDF5 Axis Selection");
        setAlwaysOnTop(true);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel1.setText("Enter HDF5 File Path:");

        jLabel2.setLabelFor(jLabel2);
        jLabel2.setText("X-Axis File Path:");

        jLabel3.setText("Y-Axis File Path:");

        Xaxispath.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        Xaxispath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                XaxispathFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                XaxispathFocusLost(evt);
            }
        });
        Xaxispath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                XaxispathKeyReleased(evt);
            }
        });

        Yaxispath.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        Yaxispath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                YaxispathFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                YaxispathFocusLost(evt);
            }
        });
        Yaxispath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                YaxispathKeyReleased(evt);
            }
        });

        HDF5PathButton.setText("Select File Path");
        HDF5PathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HDF5PathButtonActionPerformed(evt);
            }
        });

        yList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        yList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yListItemStateChanged(evt);
            }
        });

        xList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        xList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                xListItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(54, 54, 54))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Xaxispath, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(yList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Yaxispath, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(92, 92, 92))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(HDF5PathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Xaxispath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Yaxispath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HDF5PathButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void yListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yListItemStateChanged
        if(yPath != null){
            yPath = yPath + evt.getItemSelectable().getSelectedObjects()[0].toString();
        }else{
            yPath = evt.getItemSelectable().getSelectedObjects()[0].toString();
        }
        
        //update yList selection
        if(updateList(yPath, yList)){
            yPath = yPath + "/";           
        }else{
            //full path set
            yList.setVisible(false);
            pack();
        }
        Yaxispath.setText(yPath);
    }//GEN-LAST:event_yListItemStateChanged

    private void xListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_xListItemStateChanged
        if(xPath != null){
            xPath = xPath + evt.getItemSelectable().getSelectedObjects()[0].toString();
        }else{
            xPath = evt.getItemSelectable().getSelectedObjects()[0].toString();
        }
        
        //update xList selection
        if(updateList(xPath, xList)){
            xPath = xPath + "/";
        }else{
            //full path set
            System.out.println("Here");
            xList.setVisible(false);
            pack();              
        }
        Xaxispath.setText(xPath);
    }//GEN-LAST:event_xListItemStateChanged

    private void XaxispathFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_XaxispathFocusGained
        //System.out.println("Focus X: " + evt.getCause());
        if(xList.getItemCount() > 0)xList.setVisible(true);
        pack();
    }//GEN-LAST:event_XaxispathFocusGained

    private void YaxispathFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_YaxispathFocusGained
        //System.out.println("Focus Y: " + evt.getCause());
        if(yList.getItemCount() > 0)yList.setVisible(true);
        pack();
    }//GEN-LAST:event_YaxispathFocusGained

    private void XaxispathFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_XaxispathFocusLost
        xList.setVisible(false);
        pack();
    }//GEN-LAST:event_XaxispathFocusLost

    private void YaxispathFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_YaxispathFocusLost
        yList.setVisible(false);
        pack();
    }//GEN-LAST:event_YaxispathFocusLost

    private void YaxispathKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_YaxispathKeyReleased
        //update yList selection based on current typing
        boolean valid = false;
        boolean equal = false;
        String compare = null;
        String[] sections = Yaxispath.getText().split("/");
        if(sections.length > 0)compare = sections[sections.length-1];
        if(compare != null){
            for(int x = values.size() - 1; x >= 0; x--){
                String temp = values.get(x);
                for(int t = 0; t < yList.getItemCount(); t++){
                    if(temp.contains(yList.getItem(t))){
                        equal = true;
                    }
                }
                if(temp.contains(compare) && counter <= 10){
                    if(equal){
                        yList.remove(x);
                        equal = false;
                    }
                    yList.add(temp, 0);
                    counter++;
                }
                if(temp.equals(compare)){
                    valid = true;
                }
            } 
            counter = 0;
        }

        //check for addition of "/"
        if(valid){
            yList.setVisible(false);
            valid = false;
            if(evt.getKeyCode() == KeyEvent.VK_SLASH){
                if(updateList(Yaxispath.getText(), yList))
                    yList.setVisible(true);
                yPath = Yaxispath.getText();
            }
            pack();
        }
        
        //check for removal of "/" 
        if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE && previousYKey != null){
            if(previousYKey[previousYKey.length - 1] == '/'){
                pathValueIndex = pathValueIndex - 2;
                if(sections.length == 1){
                    updateList("/", yList);
                }else if(sections.length > 1){
                    updateList(sections[sections.length - 2], yList);
                }
                yList.setVisible(true);
                pack();
                
            }
        }
        previousYKey = Yaxispath.getText().toCharArray();
    }//GEN-LAST:event_YaxispathKeyReleased

    private void XaxispathKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_XaxispathKeyReleased
        //update yList selection based on current typing
        boolean valid = false;
        boolean equal = false;
        String compare = null;
        String[] sections = Xaxispath.getText().split("/");
        if(sections.length > 0)compare = sections[sections.length-1];
        if(compare != null){
            
            //System.out.println("Compare : " + compare);
            for(int x = values.size() - 1; x >= 0; x--){
                String temp = values.get(x);
                for(int t = 0; t < xList.getItemCount(); t++){
                    if(xList.getItem(t).equals(temp)){
                        equal = true;
                    }
                }
                if(temp.contains(compare) && counter <= 10){
                    if(equal)xList.remove(x);
                    xList.add(temp, 0);
                    counter++;
                }
                if(temp.equals(compare)){
//                    System.out.println("Temp true: " + temp);
                    valid = true;
                }
            } 
            counter = 0;
        }
        
        //check for addition of "/"
        if(valid){
            xList.setVisible(false);
            valid = false;
            if(evt.getKeyCode() == KeyEvent.VK_SLASH){
                if(updateList(Xaxispath.getText(), xList))
                    xList.setVisible(true);
                xPath = Xaxispath.getText();
            }
            pack();
        }
        
        //check for removal of "/" 
        if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE && previousXKey != null){
            if(previousXKey[previousXKey.length - 1] == '/'){
                
                if(sections.length == 1){
                    pathValueIndex = 0;
                    updateList("/", xList);
                }else if(sections.length > 1){
                    pathValueIndex--;
                    updateList(sections[sections.length - 2], xList);
                }
                xList.setVisible(true);
                pack();
                
            }
        }
        previousXKey = Xaxispath.getText().toCharArray();
    }//GEN-LAST:event_XaxispathKeyReleased

    private void HDF5PathButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_HDF5PathButtonActionPerformed
        ActionListener HDF5Action = new HDF5Action(this, Xaxispath, Yaxispath);
        HDF5Action.actionPerformed(evt);
        selected = true;
    }// GEN-LAST:event_HDF5PathButtonActionPerformed

    public boolean isSelected() {
        return selected;
    }
    
    public boolean updateList(String p, java.awt.List l){
      try{
          l.removeAll();
          if(values != null)values.clear();
          values = reader.buildPath(p);
//          if(pathValues.size() > pathValueIndex && pathValues.get(pathValueIndex) != null){
//              pathValues.get(pathValueIndex).clear();
//              pathValues.add(pathValueIndex, values);
//          }else{
//              pathValues.add(pathValueIndex,values);
//          }
          
          
          for(String t : values){
                l.add(t);
          }
          pathValueIndex++;
          return true;
      }catch (Exception e){
          System.err.println(e);
          return false;
      }
    }
    
    public void setModel(List<String> h, HDFReader hr) {
        reader = hr;
        //values = h;
        pathValues.add(0, h);
        values = pathValues.get(0);
        if(values.size() >= 20){
            for(int x = 0; x < 20; x++){
                yList.add(values.get(x));
                xList.add(values.get(x));
                //add ...
            }
        }else{
            for(int x = 0; x < values.size(); x++){
                yList.add(values.get(x));
                xList.add(values.get(x));
            }
        }
//        for(String t : h){
//            yList.add(t);
//            xList.add(t);
//        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton HDF5PathButton;
    private javax.swing.JTextField Xaxispath;
    private javax.swing.JTextField Yaxispath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private java.awt.List xList;
    private java.awt.List yList;
    // End of variables declaration//GEN-END:variables
}
