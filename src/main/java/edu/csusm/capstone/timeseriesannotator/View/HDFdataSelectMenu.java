package edu.csusm.capstone.timeseriesannotator.View;

import edu.csusm.capstone.timeseriesannotator.Controller.HDF5Action;
import edu.csusm.capstone.timeseriesannotator.Model.HDFReader;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTextField;

/**
 *
 * @author josef
 */
public class HDFdataSelectMenu extends javax.swing.JDialog {

    boolean selected = false;
    boolean timeStamp = false;
    HDFReader reader;
    public static HDFdataSelectMenu HDF;

    List<String> values;
    List<List<String>> pathValues; //List 0: first set of data, List x: proceeding sets of data
    String[] pathT = new String[2]; //0: xPath, 1: yPath
    List<char[]> previousKey; //0: xKey, 1: yKey
    int[] pathValueIndex = new int[2]; //0: xIndex, 1: yIndex
    List<JTextField> axisPath;//0: xAxis, 1: yAxis
    List<java.awt.List> pathList;//0: xList, 1: yList
    boolean[] finalized = new boolean[2];
    //create a boolean for finalized x and y axis paths for backspacing

    int counter;

    /**
     * Creates new form HDFdataSelectMenu
     */
    public HDFdataSelectMenu(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.pathValues = new ArrayList<>();
        this.axisPath = new ArrayList<>();
        this.pathList = new ArrayList<>();
        this.previousKey = new ArrayList<>();

        pathValueIndex[0] = 0;
        pathValueIndex[1] = 0;
        previousKey.add(new char['/']);
        previousKey.add(new char['/']);
        initComponents();
        axisPath.add(Xaxispath);
        axisPath.add(Yaxispath);
        pathList.add(xList);
        pathList.add(yList);
        setLocationRelativeTo(AppFrame.frame);
        yList.setVisible(false);
        this.HDF = this;
        this.getRootPane().setDefaultButton(HDF5PathButton);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Xaxispath = new javax.swing.JTextField();
        Yaxispath = new javax.swing.JTextField();
        HDF5PathButton = new javax.swing.JButton();
        yList = new java.awt.List();
        xList = new java.awt.List();
        Xts = new java.awt.Checkbox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("HDF5 Axis Selection");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel1.setText("Enter HDF5 File Path:");

        jLabel2.setLabelFor(jLabel2);
        jLabel2.setText("X-Axis File Path:");

        jLabel3.setText("Y-Axis File Path:");

        Xaxispath.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        Xaxispath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                XaxispathFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                XaxispathFocusLost(evt);
            }
        });
        Xaxispath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                XaxispathKeyReleased(evt);
            }
        });

        Yaxispath.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        Yaxispath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                YaxispathFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                YaxispathFocusLost(evt);
            }
        });
        Yaxispath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                YaxispathKeyReleased(evt);
            }
        });

        HDF5PathButton.setText("Select File Path");
        HDF5PathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HDF5PathButtonActionPerformed(evt);
            }
        });

        yList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        yList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yListItemStateChanged(evt);
            }
        });

        xList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        xList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                xListItemStateChanged(evt);
            }
        });

        Xts.setLabel("X-TimeStampData");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(54, 54, 54))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(92, 92, 92))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(HDF5PathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(xList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Xaxispath, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Xts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(yList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Yaxispath, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Xaxispath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Yaxispath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Xts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HDF5PathButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void yListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yListItemStateChanged
        if (pathT[1] != null && pathT[1].endsWith("/")) {
            pathT[1] = pathT[1] + evt.getItemSelectable().getSelectedObjects()[0].toString();
        } else {
            pathT[1] = evt.getItemSelectable().getSelectedObjects()[0].toString();
        }

        //update yList selection
        pathValueIndex[1]++;
        if (updateList(pathT[1], pathList.get(1), pathValueIndex[1])) {
            pathT[1] = pathT[1] + "/";
            finalized[1] = false;
        } else {
            //full path set
            finalized[1] = true;
            yList.setVisible(false);
            pack();
        }
        axisPath.get(1).setText(pathT[1]);
        previousKey.set(1, pathT[1].toCharArray());
    }//GEN-LAST:event_yListItemStateChanged

    private void xListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_xListItemStateChanged
        if (pathT[0] != null && pathT[0].endsWith("/")) {
            pathT[0] = pathT[0] + evt.getItemSelectable().getSelectedObjects()[0].toString();
        } else {
            pathT[0] = evt.getItemSelectable().getSelectedObjects()[0].toString();
        }

        //update xList selection
        pathValueIndex[0]++;
        if (updateList(pathT[0], pathList.get(0), pathValueIndex[0])) {
            pathT[0] = pathT[0] + "/";
            finalized[0] = false;
        } else {
            //full path set
            finalized[0] = true;
            pathList.get(0).setVisible(false);
            pack();
        }
        axisPath.get(0).setText(pathT[0]);
        previousKey.set(0, pathT[0].toCharArray());
    }//GEN-LAST:event_xListItemStateChanged

    private void XaxispathFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_XaxispathFocusGained
        if (xList.getItemCount() > 0) {
            xList.setVisible(true);
        }
        pack();
    }//GEN-LAST:event_XaxispathFocusGained

    private void YaxispathFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_YaxispathFocusGained
        if (yList.getItemCount() > 0) {
            yList.setVisible(true);
        }
        pack();
    }//GEN-LAST:event_YaxispathFocusGained

    private void XaxispathFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_XaxispathFocusLost
        xList.setVisible(false);
        pack();
    }//GEN-LAST:event_XaxispathFocusLost

    private void YaxispathFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_YaxispathFocusLost
        yList.setVisible(false);
        pack();
    }//GEN-LAST:event_YaxispathFocusLost

    private void YaxispathKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_YaxispathKeyReleased
        updateTyping(evt, 1);
    }//GEN-LAST:event_YaxispathKeyReleased

    private void XaxispathKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_XaxispathKeyReleased
        updateTyping(evt, 0);
    }//GEN-LAST:event_XaxispathKeyReleased

    private void HDF5PathButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_HDF5PathButtonActionPerformed
        if (Xts.getState()) {
            timeStamp = true;
        }

        ActionListener HDF5Action = new HDF5Action(this, Xaxispath, Yaxispath);
        HDF5Action.actionPerformed(evt);
        selected = true;
    }// GEN-LAST:event_HDF5PathButtonActionPerformed

    public boolean isSelected() {
        return selected;
    }

    public void updateTyping(KeyEvent e, int v) {
        //update List selection based on current typing
        boolean valid = false;
        boolean equal = false;
        String compare = null;

        List<String> tempValues;
        tempValues = pathValues.get(pathValueIndex[v]);
        String[] sections = axisPath.get(v).getText().split("/");

        if (sections.length > 0) {
            compare = sections[sections.length - 1];
        }
        if (compare != null && tempValues != null) {

            for (int x = tempValues.size() - 1; x >= 0; x--) {
                String temp = tempValues.get(x);

                if (temp.startsWith(compare) && counter <= 20) {
                    for (int t = 0; t < pathList.get(v).getItemCount(); t++) {
                        if (pathList.get(v).getItem(t).equals(temp)) {
                            pathList.get(v).remove(t);
                        }
                    }
                    pathList.get(v).add(temp, 0);
                    counter++;
                }
                if (temp.equals(compare)) {
                    valid = true;
                }
            }
            counter = 0;
        }

        //check for addition of "/"
        if (valid) {
            pathList.get(v).setVisible(false);
            valid = false;
            if (e.getKeyCode() == KeyEvent.VK_SLASH) {
                pathValueIndex[v]++;
                if (updateList(axisPath.get(v).getText(), pathList.get(v), pathValueIndex[v])) {
                    pathList.get(v).setVisible(true);
                } else {
                    finalized[v] = true;
                }
                pathT[v] = axisPath.get(v).getText();
            }
            pack();
        }

        //check for removal of "/" 
        if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE && previousKey.get(v) != null && previousKey.get(v).length > 0) {
            if (previousKey.get(v)[previousKey.get(v).length - 1] == '/') {

                if (sections.length == 1) {
                    pathValueIndex[v] = 0;
                    updateList("/", pathList.get(v), pathValueIndex[v]);
                } else if (sections.length > 1) {
                    pathValueIndex[v]--;
                    updateList(sections[sections.length - 2], pathList.get(v), pathValueIndex[v]);
                }
            }
            pathT[v] = axisPath.get(v).getText();
            pathList.get(v).setVisible(true);
            pack();
        }
        previousKey.set(v, axisPath.get(v).getText().toCharArray());
    }

    public boolean updateList(String p, java.awt.List l, int pathValueIndex) {
        try {
            l.removeAll();
            if (pathValueIndex == 0) {
                if (values.size() >= 20) {
                    for (int x = 0; x < 20; x++) {
                        l.add(values.get(x));
                    }
                } else {
                    for (int x = 0; x < values.size(); x++) {
                        l.add(values.get(x));
                    }
                }
                return true;
            }

            List<String> temp;
            temp = reader.buildPath(p);
            pathValues.add(pathValueIndex, temp);

            for (String t : temp) {
                l.add(t);
            }
            return true;
        }
        catch (Exception e) {
            System.err.println(e);
            return false;
        }
    }

    public void setModel(List<String> h, HDFReader hr) {
        reader = hr;
        pathValues.add(0, h);
        values = pathValues.get(0);
        if (values.size() >= 20) {
            for (int x = 0; x < 20; x++) {
                yList.add(values.get(x));
                xList.add(values.get(x));
                //add ...
            }
        } else {
            for (int x = 0; x < values.size(); x++) {
                yList.add(values.get(x));
                xList.add(values.get(x));
            }
        }
    }

    public boolean getTimeStamp() {
        return timeStamp;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton HDF5PathButton;
    private javax.swing.JTextField Xaxispath;
    private java.awt.Checkbox Xts;
    private javax.swing.JTextField Yaxispath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private java.awt.List xList;
    private java.awt.List yList;
    // End of variables declaration//GEN-END:variables
}
